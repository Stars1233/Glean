# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Find all targets eligible for indexing.
def _impl_discover(ctx: bxl.Context):
    uquery = ctx.uquery()

    # gets all targets
    go_targets = uquery.kind("go_binary|go_library|go_test|go_exported_library", ctx.cli_args.scope)
    print("Go targets (total):", len(go_targets))  # buildifier: disable=print

    # exclude generated: mocks, fastcli, thrift, etc
    go_targets = go_targets - uquery.attrfilter("labels", "generated", go_targets)
    print("Go targets (non-generated):", len(go_targets))  # buildifier: disable=print

    # exclude broken and incompatible with current platform
    conf_results = ctx.lazy.join_all([ctx.lazy.configured_target_node(t).catch() for t in go_targets]).resolve()
    valid_targets = []
    for result in conf_results:
        if result.is_ok():
            valid_targets.append(result.unwrap())
        else:
            print(result.unwrap_err().message)  #buildifier: disable=print

    print("Go targets (valid&compatible):", len(valid_targets))  # buildifier: disable=print

    for target in valid_targets:
        ctx.output.print(target.label.raw_target())

discover = bxl_main(
    impl = _impl_discover,
    cli_args = {
        "scope": cli_args.target_expr(),
    },
)

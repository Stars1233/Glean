# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

load("@prelude//bxl:lazy.bxl", "batch_apply_lazy_catch_each", "partition_results")

def _report_errors(errors: list[bxl.Error]):
    for error in errors:
        print(error.message)  #buildifier: disable=print

# Find all targets eligible for indexing.
def _impl_discover(ctx: bxl.Context):
    uquery = ctx.uquery()

    requested_targets = ctx.unconfigured_targets(ctx.cli_args.target_exprs or [])

    if ctx.cli_args.files:
        requested_targets += ctx.uquery().owner(ctx.cli_args.files)

    go_kind_filter = "go_binary|go_library|go_test|go_exported_library"

    # gets all targets
    all_go_targets = uquery.kind(go_kind_filter, requested_targets)
    print("Go targets (total):", len(all_go_targets))  # buildifier: disable=print

    if ctx.cli_args.with_deps:
        # HACK: do cquery here because it's 20x faster currently
        # Context: https://fburl.com/workplace/6bzec5cn
        conf_targets = ctx.cquery().kind(go_kind_filter, ctx.cquery().deps(all_go_targets, filter = "target_deps()"))
        all_go_targets = ctx.unconfigured_targets([t.label.raw_target() for t in conf_targets])
        print("Go targets (total+deps):", len(all_go_targets))  # buildifier: disable=print

    # exclude generated: mocks, fastcli, thrift, etc
    go_targets = all_go_targets - uquery.attrfilter("labels", "generated", all_go_targets)
    print("Go targets (non-generated):", len(go_targets))  # buildifier: disable=print

    go_targets = go_targets + uquery.attrfilter("labels", "go_thrift_library", all_go_targets)
    print("Go targets (non-generated+thrift):", len(go_targets))  # buildifier: disable=print

    # exclude broken and incompatible with current platform
    results = batch_apply_lazy_catch_each(ctx, ctx.lazy.configured_target_node, list(go_targets))
    targets, errors = partition_results(results)
    _report_errors(errors)
    valid_targets = bxl.ctarget_set(targets)

    print("Go targets (valid&compatible):", len(valid_targets))  # buildifier: disable=print

    for target in valid_targets:
        ctx.output.print(target.label.raw_target())

discover = bxl_main(
    impl = _impl_discover,
    cli_args = {
        "files": cli_args.option(cli_args.list(cli_args.string())),
        "target_exprs": cli_args.option(cli_args.list(cli_args.string())),
        "with_deps": cli_args.option(cli_args.bool()),
    },
)

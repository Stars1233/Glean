# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Requires -c fbcode.write_hie_files=true

load("//common/hs/index:rules.bzl", "haskell_index_rule")

def _impl(ctx):
    bxl_actions = ctx.bxl_actions()
    action_factory = bxl_actions.actions

    # TODO: have a separate indexer for each compiler version, and index targets using
    # the correct one. Probably needs a provider or an attribute to tell us which
    # compiler to use.
    ctargets = ctx.configured_targets(
        ctx.cli_args.targets,
        modifiers = ["ovr_config//third-party/ghc/constraints:8.8.3"],
    )

    deps = [ctx.analysis(t).as_dependency() for t in ctargets]

    hie = action_factory.anon_target(
        haskell_index_rule,
        attrs = {
            "deps": deps,
            # "link_style": link_styles.default(),
            "link_style": "shared",
        },
    )
    hie_result = ctx.resolve(action_factory, hie.promise)
    hie_files = (hie_result[DefaultInfo].default_outputs[0])

    hie_indexer = ctx.analysis(ctx.configured_targets(
        "fbcode//glean/lang/haskell:indexer",
        modifiers = ["ovr_config//third-party/ghc/constraints:8.8.3"],
    ))

    facts = action_factory.declare_output("facts")
    args = cmd_args(hie_indexer.providers()[RunInfo])
    args.add(ctx.cli_args.backend)
    args.add("--repo-path", ctx.root())
    args.add("--output", facts.as_output())
    if ctx.cli_args.schema_id:
        args.add("--schema-id", ctx.cli_args.schema_id)
    args.add(hie_files)

    action_factory.run(
        args,
        category = "glean_haskell_indexer",
        local_only = True,  # needs access to the repo
    )
    ensured = ctx.output.ensure(facts)
    ctx.output.print(ensured.abs_path())

index = bxl_main(
    impl = _impl,
    cli_args = {
        "backend": cli_args.string(""),
        "schema-id": cli_args.option(cli_args.string()),
        "targets": cli_args.list(cli_args.target_label()),
    },
)

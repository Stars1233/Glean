# Copyright (c) Meta Platforms, Inc. and affiliates.

schema search.cxx.5 {
import cxx1.5
import code.cxx.4
import search.kind.cxx.1

# Declarations with no scope
predicate GlobalDeclarationWithName :
  {
    name : cxx1.Name,
    decl : cxx1.Declaration,
  }
  { N, D }
  where
  D =
    (
      cxx1.Declaration
        {
          objcContainer =
            {
              id =
                { protocol = N } |
                { interface_ = N } |
                { categoryInterface = { className = N } } |
                { extensionInterface = N } |
                { implementation = N } |
                { categoryImplementation = { className = N } }
            }
        }
    ) |
    (cxx1.Declaration { objcProperty = { name = N }})

# Find direct definition entities for various declaration types
predicate DeclIsDefn :
  {
    decl : cxx1.Declaration,
    defn : code.cxx.Definition
  }
  { Decl, Defn } where
    ({ record_ = D } = Decl;
     { record_ = cxx1.RecordDefinition { declaration = D } } = Defn ) |
    ({ function_ = D } = Decl;
     { function_ = cxx1.FunctionDefinition { declaration = D } } = Defn) |
    ({ enum_ = D } = Decl;
     { enum_ = cxx1.EnumDefinition { declaration = D } } = Defn) |
    # variable definitions are considered "definitions" if they're global
    ({ variable = D } = Decl;
     cxx1.VariableDeclaration { kind = { global_ = { definition = true }}} = D;
     { variable = D } = Defn) |
    ({ namespace_ = D } = Decl;
      { namespace_ = cxx1.NamespaceDefinition { declaration = D } } = Defn) |
    ({ objcMethod = D } = Decl;
     { objcMethod = cxx1.ObjcMethodDefinition D } = Defn ) |
    ({ objcContainer = D } = Decl;
     { objcContainer = cxx1.ObjcContainerDefinition { declaration = D }} = Defn)

predicate SearchByNameAndScope :
  {
    name : cxx1.Name,
    scope : cxx1.Scope,
    entity : code.cxx.Entity,
  }
  {N, Scope, Entity} where
    ( # Several things use QName, so share the query for it
      Q = cxx1.QName { name = N, scope = Scope };
      Entity =
        code.cxx.Entity { decl = { record_ = { name = Q }}}  |
        code.cxx.Entity { decl = { variable = { name = Q }}} |
        code.cxx.Entity { decl = { typeAlias = { name = Q }}} |
        code.cxx.Entity { decl = { enum_ = { name = Q }}};
    ) | (
      D = cxx1.FunctionDeclaration
        { name = { name = { name = N }, scope = Scope } };
      Entity = code.cxx.Entity { decl = { function_ = D } }
    ) | (
      GlobalDeclarationWithName { N, Decl };
      Entity = code.cxx.Entity { decl = Decl };
      { global_ = {} } = Scope;
    ) | (
      # This can be optimized with SearchEnumerator, once those facts are live
      E = cxx1.Enumerator { name = N, enumeration = T };
      { name = QN, isScoped = Scoped } = T;
      (
        false = Scoped;
        { scope = Scope } = QN
      ) | (
        true = Scoped;
        { recordWithAccess = { record = QN, access = Public }} = Scope
      );
      Entity = code.cxx.Entity { enumerator = E };
    ) | (
      cxx1.Name NameStr = N;
      search.kind.cxx.SearchNamespace { NameStr, Scope, Entity }
    )

predicate SearchByScope :
  {
    scope : cxx1.Scope,
    entity : code.cxx.Entity,
  }
  {Scope, Entity} where
    (
        {namespace_= QName } = Scope;
        NS = cxx1.NamespaceDeclaration { name = QName };
        Entity = code.cxx.Entity { decl = { namespace_ = NS } };
    )

predicate SearchBySelector :
  {
    selector : cxx1.ObjcSelector,
    entity : code.cxx.Entity,
  }
  { Selector, Ent } where
  Ent = code.cxx.Entity { decl = { objcMethod = { selector = Selector }}}

# Easy way to query for TargetUses for an Entity. Note this doesn't
# handle the `defn` alternative of `code.cxx.Entity`, but the
# call site of this predicate ('Glean.Search.Search') always uses it
# with declarations and not definitions.
predicate EntityUses :
  {
    entity : code.cxx.Entity,
    uses : cxx1.TargetUses
  }
  { E, U } where
    (
      code.cxx.Entity { decl = D } = E;
      U = cxx1.TargetUses { target = { declaration = D } }
    ) | (
      code.cxx.Entity { enumerator = En } = E;
      U = cxx1.TargetUses { target = { enumerator = En } }
    )

#
# Generating scope values for queries
#
# We could play games with holes in the namespace query, or anonymous
# segments
#

# Helper to lookup cxx1.Name based on case sensitivity param
# allows us to convert scope to lowercase search on the fly
predicate CxxNameCase:
  {
    insensitive: bool,
    namestr: string,
    name: cxx1.Name
  }
  { Insensitive, NameStr, Name } where
  ( true = Insensitive;
    cxx1.DeclByName { name_lowercase = NameStr, ident = Ident };
    { name = Name } = Ident # filtering to cxx1.Name only
  ) | (
    false = Insensitive;
    Name = cxx1.Name NameStr
  )

# Compile search query tuples into scope facts
predicate QueryToScopeCase :
  {
    query : [string],
    insensitive: bool, # if true, search insensitive throughout scope term
    scope : cxx1.Scope
  }
  { Query, Case, Scope } where
    # global fixed global_
    ( [] = Query; true | false = Case; { global_ = _ }
    # namespace scope
    ) | (
      QueryToNSQNameCase { Query, Case, NSQName };
      { namespace_ = NSQName }
    # struct/record scope
    ) | (
      QueryToQNameCase { Query, Case, QName };
      { recordWithAccess = { record = QName,
          access = Public | Protected | Private } } # avoid wild card bind error
    ) = Scope;

# compile to generic scoped qname
predicate QueryToQNameCase:
  {
    query : [string],
    insensitive: bool,
    scope : cxx1.QName
  }
  { Query, Case, QName } where
    # zero tuple
    ( [] = Query; true | false = Case;
      cxx1.QName { name = "", scope = { global_ = {} } } ) |
    # one tuple
    ( [A] = Query;
      CxxNameCase { Case, A, AName };
      { name = AName } ) |
    # two tuple. we branch back to scope cases
    ( [B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      { name = AName, scope =
        { namespace_ = { name = { just = BName } } } |
        { recordWithAccess = { record = { name = BName } } }
      } ) |
    # three tuple
    ( [C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      { name = AName, scope =
        { namespace_ = { name = { just = BName },
          parent = { just = { name = { just = CName } } } } } |
        { recordWithAccess = { record = { name = BName,
          scope = { namespace_ = { name = { just = CName } } } |
                  { recordWithAccess = { record = { name = CName } } }
        } } }
      } ) |
    # four tuple sigh. e.g. 4 records deep , or two records in two namespaces
    ( [D,C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      CxxNameCase { Case, D, DName };
      { name = AName, scope =
        { namespace_ = { name = { just = BName },
          parent = { just = { name = { just = CName },
            parent = { just = { name = { just = DName } }  }
           } } } } |
        { recordWithAccess = { record = { name = BName,
          scope = { namespace_ = { name = { just = CName },
            parent = { just = { name = { just = DName } } }
           } } |
          { recordWithAccess = { record = { name = CName,
          scope = { namespace_ = { name = { just = DName } } } |
            { recordWithAccess = { record = { name = DName } } }
           } } }
        } } }
      }
    ) = QName;

# compile to namespace qname, case aware
predicate QueryToNSQNameCase:
  {
    query : [string],
    insensitive: bool,
    scope : cxx1.NamespaceQName
  }
  { Query, Case, NSQName } where
    # zero tuple
    ( [] = Query; true | false = Case; { nothing, nothing } ) |
    # one tuple
    ( [A] = Query;
      CxxNameCase { Case, A, AName };
      { name = { just = AName }}) | # n.b. parent wild
    # two tuple
    ( [B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      { name = { just = AName },
        parent = { just = { name = { just = BName } } } } ) |
    # three tuple
    ( [C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      { name = { just = AName },
        parent = { just = { name = { just = BName },
        parent = { just = { name = { just = CName } }}}}} ) |
    # four tuple
    ( [D,C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      CxxNameCase { Case, D, DName };
      { name = { just = AName },
        parent = { just = { name = { just = BName },
        parent = { just = { name = { just = CName },
        parent = { just = { name = { just = DName } }}}}}}} ) |
    # five tuple
    ( [E,D,C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      CxxNameCase { Case, D, DName };
      CxxNameCase { Case, E, EName };
      { name = { just = AName },
        parent = { just = { name = { just = BName },
        parent = { just = { name = { just = CName },
        parent = { just = { name = { just = DName },
        parent = { just = { name = { just = EName } }}}}}}}}} ) |
    # six tuple
     ( [F,E,D,C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      CxxNameCase { Case, D, DName };
      CxxNameCase { Case, E, EName };
      CxxNameCase { Case, F, FName };
      { name = { just = AName },
        parent = { just = { name = { just = BName },
        parent = { just = { name = { just = CName },
        parent = { just = { name = { just = DName },
        parent = { just = { name = { just = EName },
        parent = { just = { name = { just = FName } }}}}}}}}}}} ) |
    # seven for real
     ( [G,F,E,D,C,B,A] = Query;
      CxxNameCase { Case, A, AName };
      CxxNameCase { Case, B, BName };
      CxxNameCase { Case, C, CName };
      CxxNameCase { Case, D, DName };
      CxxNameCase { Case, E, EName };
      CxxNameCase { Case, F, FName };
      CxxNameCase { Case, G, GName };
      { name = { just = AName },
        parent = { just = { name = { just = BName },
        parent = { just = { name = { just = CName },
        parent = { just = { name = { just = DName },
        parent = { just = { name = { just = EName },
        parent = { just = { name = { just = FName },
        parent = { just = { name = { just = GName } }}}}}}}}}}}}}
    ) = NSQName;

}

# Copyright (c) Meta Platforms, Inc. and its affiliates.

schema codemarkup.haskell.2 {

import src.1
import code.hs.2
import codemarkup.types.1
import hs.2

#
# Resolving locations to entities
#

# Resolve sigma/Haskell locations
predicate HaskellResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.hs.Entity,
  }
  { { Name, File, { span = Span }, nothing }, Defn } where
    hs.FileDefinition { File, Defn };
    hs.DefinitionLocation { Defn, Name, { File , Span }};

#
# Finding entities' locations
#

predicate HaskellEntityLocation:
  {
    entity: code.hs.Entity,
    location: codemarkup.types.Location,
  }
  { D, { Name, File, { span = Span }, nothing } } where
    hs.DefinitionLocation { D, Name, { File, Span } };

#
# Finding references in a file
#

# XRefs in sigma/Haskell
predicate HaskellFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.hs.Entity,
  }
  { File, { Location, { span = SrcSpan } }, { definition = Def } } where
    # Get all XRefs in file
    hs.FileXRefMap { file = File, refs = XRefs };
    # Map over each XRef
    hs.XReference { target = { definition = hs.DefinitionName TargetName }, spans = SrcSpans } = XRefs[..];

    SrcSpan = SrcSpans[..];

    Def = hs.Definition
      {
        name = hs.DefinitionName TargetName,
        source = {TargetFile, TargetSpan}
      };
    Location = codemarkup.types.Location { TargetName, TargetFile, { span = TargetSpan }, nothing };


#
# Language entity uses
#

predicate HaskellEntityUses:
  {
    target: code.hs.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  { { definition = Def }, File, SrcSpan } where
    hs.TargetUses {target = Def, file = File, uses = Spans};
    SrcSpan = Spans[..];

}

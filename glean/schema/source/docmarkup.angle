# Copyright (c) Facebook, Inc. and its affiliates.

# schema docmarkup is for structured information about comments
# Once this is stable enough, perhaps merge with schema codemarkup
schema docmarkup.14 {

import code.24
import cxx1.5
import hack.6
import src.1


##############################################################################
# Special Documentation Attributes, parsed from a comment

# The DocAttrKey
# Example: For C| /// @somename My value.
# has a DocAttrKey of "somename"
predicate DocAttrKey : string

# The DocAttrValue string can be multiline, with included newlines.
# Example: For C| /// @somename My value.
# has a DocAttrValue of "My value."
type DocAttrValue = string

# A single annotation inside a doc block comment
predicate DocAttr :
  {
    key : DocAttrKey,
    value : DocAttrValue,
  }

# Order of the list matches the order in the source comment.
# DocAttrKey may occur more than once.
type DocAttrs = [DocAttr]

# This EntityDocAttr looks up the special documentation comment attributes
predicate EntityDocAttr : code.Entity -> DocAttrs

##############################################################################
# Comment indexing support

# Derived query to collect all comments, represented by file and span
predicate EntityComments :
  {
    entity : code.Entity,
    file : src.File,
    span : src.ByteSpan,
  }
  {E, F, S} where
    (
      cxx1.DeclarationComment{ declaration = D, file = F, span = S };
      E = code.Entity{ cxx = {decl = D} };
    ) | (
      hack.DeclarationComment{ declaration = D, file = F, span = S };
      E = code.Entity{ hack = {decl = D} };
    )

}
